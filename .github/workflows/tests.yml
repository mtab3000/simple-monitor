name: Unit Tests

on:
  push:
    branches: [ main, data-model-improvements, mining-optimization-analyzer, web ]
  pull_request:
    branches: [ main, data-model-improvements, web ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock
    
    - name: Create test config
      run: |
        mkdir -p examples
        cp examples/config.example.yaml config.yaml || echo "Config example not found, creating minimal config"
        if [ ! -f config.yaml ]; then
          cat > config.yaml << EOF
        poll_interval: 30
        csv_path: metrics.csv
        timeout: 10
        retries: 3
        retry_delay: 1
        miners:
          - ip: '192.168.1.45'
            expected_hashrate_ghs: 934.3
        EOF
        fi
    
    - name: Run unit tests only
      run: |
        pytest tests/ -v -m "not integration" --tb=short
      continue-on-error: true
    
    - name: Run all tests with coverage
      run: |
        pytest tests/ --cov=src --cov-report=xml --cov-report=term-missing --tb=short
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Generate test report
      run: |
        pytest tests/ --junitxml=test-results.xml || true
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: test-results.xml
      if: always()